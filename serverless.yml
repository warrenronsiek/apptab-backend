service: apptab-backend
provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.default_stage}
  memorySize: 128
  environment:
    stage: ${self:provider.stage}
  region: us-west-2

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: "arn:aws:s3:::${self:provider.stage}-apptab-formatted-data-bucket"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - "${self:provider.stage}-apptab-formatted-data-bucket"
          - "/*"
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - "Ref" : "ServerlessDeploymentBucket"
            - "/*"

custom:
  default_stage: dev

package:
  include:
    - dist/**
  exclude:
    - lib/**
    - package.json
    - package-lock.json
    - typings/**
    - test/**
    - request_templates/**
    - .git
    - .gitignore
    - .babelrc
    - .npmignore
    - tsconfig.json
    - typings.json
    - typings/**
    - webpack.config.js
    - .idea/**
    - node_modules/**

functions:
  processFirehoseData:
    handler: dist/processFirehoseData.processFirehoseData
    timeout: 60

resources:
  Resources:

#######################
#### DYNAMO TABLES ####
#######################
    NodeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: NodeId
          AttributeType: S
        - AttributeName: VenueId
          AttributeType: S
        KeySchema:
        - AttributeName: NodeId
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
        TableName: ${self:provider.stage}-NodeTable
        GlobalSecondaryIndexes:
        - IndexName: VenueIdToNodeId
          KeySchema:
          - AttributeName: VenueId
            KeyType: HASH
          - AttributeName: NodeId
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    MenuTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: VenueId
          AttributeType: S
        - AttributeName: ItemId
          AttributeType: S
        TableName: ${self:provider.stage}-MenuTable
        KeySchema:
        - AttributeName: VenueId
          KeyType: HASH
        - AttributeName: ItemId
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    VenueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: VenueId
          AttributeType: S
        - AttributeName: VenueName
          AttributeType: S
        - AttributeName: CreatorClientId
          AttributeType: S
        TableName: ${self:provider.stage}-VenueTable
        KeySchema:
        - AttributeName: VenueId
          KeyType: HASH
        GlobalSecondaryIndexes:
        - IndexName: NameToId
          KeySchema:
          - AttributeName: VenueName
            KeyType: HASH
          - AttributeName: VenueId
            KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        - IndexName: ClientIdToVenueId
          KeySchema:
          - AttributeName: CreatorClientId
            KeyType: HASH
          - AttributeName: VenueId
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    ClientTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: ClientId
          AttributeType: S
        TableName: ${self:provider.stage}-ClientTable
        KeySchema:
        - AttributeName: ClientId
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    SubscriptionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: ClientId
          AttributeType: S
        - AttributeName: NodeId
          AttributeType: S
        TableName: ${self:provider.stage}-SubscriptionTable
        KeySchema:
        - AttributeName: NodeId
          KeyType: HASH
        - AttributeName: ClientId
          KeyType: RANGE
        GlobalSecondaryIndexes:
        - IndexName: ClientIdToNodeId
          KeySchema:
          - AttributeName: ClientId
            KeyType: HASH
          - AttributeName: NodeId
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-CustomerTable
        AttributeDefinitions:
        - AttributeName: CustomerId
          AttributeType: S
        KeySchema:
        - AttributeName: CustomerId
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    CardTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-CardTable
        AttributeDefinitions:
        - AttributeName: CardId
          AttributeType: S
        - AttributeName: CustomerId
          AttributeType: S
        KeySchema:
        - AttributeName: CustomerId
          KeyType: HASH
        - AttributeName: CardId
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    TransactionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-TransactionTable
        AttributeDefinitions:
          - AttributeName: TransactionId
            AttributeType: S
          - AttributeName: CustomerId
            AttributeType: S
          - AttributeName: ClientId
            AttributeType: S
          - AttributeName: NodeId
            AttributeType: S
          - AttributeName: VenueId
            AttributeType: S
          - AttributeName: CardToken
            AttributeType: S
        KeySchema:
          - AttributeName: TransactionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: ClientKey
          KeySchema:
          - AttributeName: ClientId
            KeyType: HASH
          - AttributeName: TransactionId
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: CustomerKey
          KeySchema:
          - AttributeName: CustomerId
            KeyType: HASH
          - AttributeName: TransactionId
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: VenueKey
          KeySchema:
          - AttributeName: VenueId
            KeyType: HASH
          - AttributeName: TransactionId
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: NodeKey
          KeySchema:
          - AttributeName: NodeId
            KeyType: HASH
          - AttributeName: TransactionId
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: CardKey
          KeySchema:
          - AttributeName: CardToken
            KeyType: HASH
          - AttributeName: TransactionId
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    ChargeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-ChargeTable
        AttributeDefinitions:
        - AttributeName: CardToken
          AttributeType: S
        - AttributeName: ChargeId
          AttributeType: S
        - AttributeName: CustomerId
          AttributeType: S
        KeySchema:
        - AttributeName: ChargeId
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
        GlobalSecondaryIndexes:
          - IndexName: CardKey
            KeySchema:
            - AttributeName: CardToken
              KeyType: HASH
            - AttributeName: ChargeId
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: CustomerKey
            KeySchema:
            - AttributeName: CustomerId
              KeyType: HASH
            - AttributeName: ChargeId
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

###################
#### USERPOOLS ####
###################
    CustomerPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: False
        AliasAttributes:
          - phone_number
        MfaConfiguration: "OFF"
        UserPoolName: ${self:provider.stage}-CustomerPool
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: True
            Required: False
            StringAttributeConstraints:
              MaxLength: 11
              MinLength: 2
          - Name: phone_number
            AttributeDataType: String
            Mutable: False
            Required: False
            StringAttributeConstraints:
              MaxLength: 20
              MinLength: 12
        SmsAuthenticationMessage: "AppTab authentication code: {####}"
        SmsVerificationMessage: "AppTab authentication code: {####}"
    ClientPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: False
        AliasAttributes:
          - email
        MfaConfiguration: "OFF"
        UserPoolName: ${self:provider.stage}-ClientPool
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: True
            Required: True
          - Name: phone_number
            AttributeDataType: String
            Mutable: True
            Required: True
            StringAttributeConstraints:
              MaxLength: 20
              MinLength: 12
    CustomerPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-CustomerApp
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: False
        UserPoolId:
          Ref: CustomerPool
    ClientPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-ClientApp
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: False
        UserPoolId:
          Ref: ClientPool
    CustomerIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:provider.stage}CustomerIDP
        AllowUnauthenticatedIdentities: true
        SupportedLoginProviders:
          "graph.facebook.com": 1945842355430424
        CognitoIdentityProviders:
        - ClientId:
            Ref: CustomerPoolClient
          ProviderName:
            Fn::GetAtt:
            - CustomerPool
            - ProviderName
          ServerSideTokenCheck: true
    CustomerIdentityPoolRole:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CustomerIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt:
            - AuthIDPRole
            - Arn
          unauthenticated:
            Fn::GetAtt:
            - UnauthIDPRole
            - Arn
    AuthIDPRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
            - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: CustomerIdentityPool
    WriteToFirehosePolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: 'apptab-${self:provider.stage}-WriteToFirehosePolicy'
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - firehose:PutRecord
            - firehose:PutRecordBatch
            Resource:
            - Fn::Join:
              - ""
              - - "arn:aws:firehose:"
                - Ref: AWS::Region
                - ":"
                - Ref: AWS::AccountId
                - ":deliverystream/"
                - Ref: Firehose
        Roles:
        - Ref: AuthIDPRole
        - Ref: UnauthIDPRole
    ImageBucketAccessPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: 'apptab-${self:provider.stage}-ImageBucketAccessPolicy'
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - "s3:*"
            Resource:
            - Fn::Join:
              - ""
              - - Fn::GetAtt:
                  - ImageBucket
                  - Arn
                - "/*"
        Roles:
        - Ref: AuthIDPRole
        - Ref: UnauthIDPRole
    ExecuteFBLoginLambdaPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: 'apptab-${self:provider.stage}-ExecuteFBLoginLambdaPolicy'
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - "lambda:InvokeFunction"
            Resource:
            - Fn::Join:
              - ""
              - - "arn:aws:lambda:${self:provider.region}:"
                - Ref: "AWS::AccountId"
                - ":function:apptab-customer-api-${self:provider.stage}-fbLogin"
        Roles:
        - Ref: AuthIDPRole
    UnauthIDPRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
            - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: CustomerIdentityPool
    AthenaAccessIDP:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:provider.stage}ClientIDP
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
        - ClientId:
            Ref: ClientPoolClient
          ProviderName:
            Fn::GetAtt:
            - ClientPool
            - ProviderName
          ServerSideTokenCheck: true
    AthenaAccessIDPA:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: AthenaAccessIDP
        Roles:
          authenticated:
            Fn::GetAtt:
            - AthenaAccessRole
            - Arn
    AthenaAccessRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
            - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud":
                  Ref: AthenaAccessIDP
        Policies:
        - PolicyName: AthenaBucketAccess
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - s3:GetBucketLocation
              - s3:GetObject
              Resource:
              - Fn::GetAtt:
                - AthenaQueryBucket
                - Arn
        - PolicyName: ImageBucketAccess
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - "s3:*"
              Resource:
              - Fn::Join:
                - ""
                - - Fn::GetAtt:
                    - ImageBucket
                    - Arn
                  - "/*"
##################
#### FIREHOSE ####
##################
    FirehoseRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
        Policies:
        - PolicyName: FirehoseToS3WritePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: logs:PutLogEvents
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:logs:'
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":log-group:"
                  - Ref: FirehoseLogGroup
                  - ":log-stream:"
                  - Ref: FirehoseLogs
            - Effect: Allow
              Action:
              - lambda:InvokeFunction
              - lambda:InvokeAsync
              Resource:
                Fn::Join:
                - ""
                - - "arn:aws:lambda:${self:provider.region}:"
                  - Ref: "AWS::AccountId"
                  - ":function:${self:service}-${self:provider.stage}-processFirehoseData"
            - Effect: Allow
              Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
              Resource:
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: DataBucket
              - Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: DataBucket
                  - "/*"
    FirehoseLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: ${self:provider.stage}-AppTabFirehoseLogs
        RetentionInDays: 3
    FirehoseLogs:
      Type: AWS::Logs::LogStream
      Properties:
        LogStreamName: ${self:provider.stage}-AppTabFirehoseLogStream
        LogGroupName:
          Ref: FirehoseLogGroup
    DataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stage}-apptab-data-bucket
    FormattedDataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stage}-apptab-formatted-data-bucket
    Firehose:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: ${self:provider.stage}-apptab-data-stream
        ExtendedS3DestinationConfiguration:
          BucketARN:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: DataBucket
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 10
          RoleARN:
            Fn::GetAtt:
            - FirehoseRole
            - Arn
          CompressionFormat: ZIP
          ProcessingConfiguration:
            Enabled: true
            Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue:
                    Fn::Join:
                    - ""
                    - - "arn:aws:lambda:${self:provider.region}:"
                      - Ref: "AWS::AccountId"
                      - ":function:${self:service}-${self:provider.stage}-processFirehoseData"
              Type: Lambda
          Prefix: apptab
          CloudWatchLoggingOptions:
            Enabled: true
            LogGroupName:
              Ref: FirehoseLogGroup
            LogStreamName:
              Ref: FirehoseLogs

######################
#### S3 DATA LAKE ####
######################
    GlueRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action:
            - sts:AssumeRole
        Policies:
        - PolicyName: GluePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - "glue:*"
              - "s3:GetBucketLocation"
              - "s3:ListBucket"
              - "s3:ListAllMyBuckets"
              - "s3:GetBucketAcl"
              - "ec2:DescribeVpcEndpoints"
              - "ec2:DescribeRouteTables"
              - "ec2:CreateNetworkInterface"
              - "ec2:DeleteNetworkInterface"
              - "ec2:DescribeNetworkInterfaces"
              - "ec2:DescribeSecurityGroups"
              - "ec2:DescribeSubnets"
              - "ec2:DescribeVpcAttribute"
              - "iam:ListRolePolicies"
              - "iam:GetRole"
              - "iam:GetRolePolicy"
              Resource: "*"
            - Effect: Allow
              Action:
              - "s3:CreateBucket"
              Resource:
              - "arn:aws:s3:::aws-glue-*"
            - Effect: Allow
              Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
              Resource:
              - "arn:aws:s3:::aws-glue-*/*"
              - "arn:aws:s3:::*/*aws-glue-*/*"
            - Effect: Allow
              Action:
              - "s3:GetObject"
              Resource:
              - "arn:aws:s3:::crawler-public*"
              - "arn:aws:s3:::aws-glue-*"
            - Effect: Allow
              Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              Resource:
              - "arn:aws:logs:*:*:/aws-glue/*"
            - Effect: Allow
              Action:
              - "ec2:CreateTags"
              - "ec2:DeleteTags"
              Resource:
              - "arn:aws:ec2:*:*:network-interface/*"
              - "arn:aws:ec2:*:*:security-group/*"
              - "arn:aws:ec2:*:*:instance/*"
              Condition:
                "ForAllValues:StringEquals":
                  "aws:TagKeys":
                  - "aws-glue-service-resource"
            - Effect: Allow
              Action:
              - "*"
              Resource:
              - Fn::GetAtt:
                - FormattedDataBucket
                - Arn
              - Fn::Join:
                - ''
                - - Fn::GetAtt:
                    - FormattedDataBucket
                    - Arn
                  - '/*'
    ClosedTransactionBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stage}-apptab-closed-transaction-bucket
    GlueDatabase:
      Type: AWS::Glue::Database
      Properties:
        CatalogId:
          Ref: AWS::AccountId
        DatabaseInput:
          Name: ${self:provider.stage}apptab
    EventTable:
      Type: AWS::Glue::Table
      Properties:
        DatabaseName:
          Ref: GlueDatabase
        CatalogId:
          Ref: AWS::AccountId
        TableInput:
          TableType: VIRTUAL_VIEW
          Name: events
          Parameters:
            classification: json
          PartitionKeys:
          - Name: eventId
            Type: string
          StorageDescriptor:
            StoredAsSubDirectories: True
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
              Parameters:
                paths: customerId,date,deviceToken,eventId,os,sessionId,type
            Columns:
            - Name: eventId
              Type: string
            - Name: type
              Type: string
            - Name: sessionId
              Type: string
            - Name: date
              Type: bigint
            - Name: customerId
              Type: string
            - Name: deviceToken
              Type: string
            - Name: os
              Type: string
            Location: 's3://${self:provider.stage}-apptab-formatted-data-bucket/events/'
            Compressed: False
    CartTable:
      Type: AWS::Glue::Table
      Properties:
        DatabaseName:
          Ref: GlueDatabase
        CatalogId:
          Ref: AWS::AccountId
        TableInput:
          TableType: VIRTUAL_VIEW
          Name: cart
          Parameters:
            classification: json
          PartitionKeys:
          - Name: eventId
            Type: string
          StorageDescriptor:
            StoredAsSubDirectories: True
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
              Parameters:
                paths: eventId,date,itemId,itemName,itemDescription,price,viewablePrice,tags,category,showIncrementer,itemOptions,count
            Columns:
            - Name: eventId
              Type: string
            - Name: itemId
              Type: string
            - Name: itemName
              Type: string
            - Name: date
              Type: bigint
            - Name: itemDescription
              Type: string
            - Name: price
              Type: int
            - Name: viewablePrice
              Type: string
            - Name: tags
              Type: array<string>
            - Name: category
              Type: string
            - Name: showIncrement
              Type: boolean
            - Name: itemOptions
              Type: array<struct<optionSetName:string,optionSetId:int,data:array<struct<optionName:string,price:int,optionId:int>>>>
            - Name: count
              Type: int
            Location: 's3://${self:provider.stage}-apptab-formatted-data-bucket/cart/'
            Compressed: False
    LoginTable:
      Type: AWS::Glue::Table
      Properties:
        DatabaseName:
          Ref: GlueDatabase
        CatalogId:
          Ref: AWS::AccountId
        TableInput:
          TableType: VIRTUAL_VIEW
          Name: logins
          Parameters:
            classification: json
          PartitionKeys:
          - Name: eventId
            Type: string
          StorageDescriptor:
            StoredAsSubDirectories: True
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
              Parameters:
                paths: eventId,date,loggingIn,unknownError,networkError,validationError
            Columns:
            - Name: eventId
              Type: string
            - Name: date
              Type: bigint
            - Name: loggingIn
              Type: boolean
            - Name: unknownError
              Type: boolean
            - Name: networkError
              Type: boolean
            - Name: validationError
              Type: boolean
            Location: 's3://${self:provider.stage}-apptab-formatted-data-bucket/logins/'
            Compressed: False
    NodeGlueTable:
      Type: AWS::Glue::Table
      Properties:
        DatabaseName:
          Ref: GlueDatabase
        CatalogId:
          Ref: AWS::AccountId
        TableInput:
          TableType: VIRTUAL_VIEW
          Name: nodes
          Parameters:
            classification: json
          PartitionKeys:
          - Name: eventId
            Type: string
          StorageDescriptor:
            StoredAsSubDirectories: True
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
              Parameters:
                paths: eventId,date,nodeId,venueId
            Columns:
            - Name: eventId
              Type: string
            - Name: date
              Type: bigint
            - Name: nodeId
              Type: string
            - Name: venueId
              Type: string
            Location: 's3://${self:provider.stage}-apptab-formatted-data-bucket/nodes/'
            Compressed: False
    PaymentsTable:
      Type: AWS::Glue::Table
      Properties:
        DatabaseName:
          Ref: GlueDatabase
        CatalogId:
          Ref: AWS::AccountId
        TableInput:
          TableType: VIRTUAL_VIEW
          Name: payments
          Parameters:
            classification: json
          PartitionKeys:
          - Name: eventId
            Type: string
          StorageDescriptor:
            StoredAsSubDirectories: True
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
              Parameters:
                paths: eventId,date,success,failure,processing
            Columns:
            - Name: eventId
              Type: string
            - Name: date
              Type: bigint
            - Name: success
              Type: boolean
            - Name: failure
              Type: boolean
            - Name: processing
              Type: boolean
            Location: 's3://${self:provider.stage}-apptab-formatted-data-bucket/payments/'
            Compressed: False
    SessionsTable:
      Type: AWS::Glue::Table
      Properties:
        DatabaseName:
          Ref: GlueDatabase
        CatalogId:
          Ref: AWS::AccountId
        TableInput:
          TableType: VIRTUAL_VIEW
          Name: sessions
          Parameters:
            classification: json
          PartitionKeys:
          - Name: sessionId
            Type: string
          StorageDescriptor:
            StoredAsSubDirectories: True
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
              Parameters:
                paths: sessionId,date,activeNode,activeVenue
            Columns:
            - Name: sessionId
              Type: string
            - Name: date
              Type: bigint
            - Name: activeNode
              Type: string
            - Name: activeVenue
              Type: string
            Location: 's3://${self:provider.stage}-apptab-formatted-data-bucket/sessions/'
            Compressed: False
    VenuesTable:
      Type: AWS::Glue::Table
      Properties:
        DatabaseName:
          Ref: GlueDatabase
        CatalogId:
          Ref: AWS::AccountId
        TableInput:
          TableType: VIRTUAL_VIEW
          Name: venues
          Parameters:
            classification: json
          PartitionKeys:
          - Name: eventId
            Type: string
          StorageDescriptor:
            StoredAsSubDirectories: True
            InputFormat: org.apache.hadoop.mapred.TextInputFormat
            OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
            SerdeInfo:
              SerializationLibrary: org.openx.data.jsonserde.JsonSerDe
              Parameters:
                paths: sessionId,date,activeNode,activeVenue
            Columns:
            - Name: eventId
              Type: string
            - Name: deviceToken
              Type: string
            - Name: date
              Type: bigint
            - Name: os
              Type: string
            - Name: venueId
              Type: string
            - Name: venueName
              Type: string
            - Name: address
              Type: string
            Location: 's3://${self:provider.stage}-apptab-formatted-data-bucket/venues/'
            Compressed: False
    Crawler:
      Type: AWS::Glue::Crawler
      Properties:
        Role:
          Ref: GlueRole
        DatabaseName:
          Ref: GlueDatabase
        Name: ${self:provider.stage}apptabcrawler
        Targets:
          S3Targets:
          - Path: 's3://${self:provider.stage}-apptab-formatted-data-bucket/'
        SchemaChangePolicy:
          UpdateBehavior: UPDATE_IN_DATABASE
          DeleteBehavior: DEPRECATE_IN_DATABASE
    AthenaQueryBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stage}-apptab-athena-queries
    ImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.stage}-apptab-image-bucket
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - HEAD
            - POST
            - DELETE
            AllowedOrigins:
            - "*"
            AllowedHeaders:
            - "*"
#################
#### OUTPUTS ####
#################
  Outputs:
    SubscriptionTable:
      Value:
        Ref: SubscriptionTable
      Export:
        Name: ${self:provider.stage}-SubscriptionTable
    NodeTable:
      Value:
        Ref: NodeTable
      Export:
        Name: ${self:provider.stage}-NodeTable
    MenuTable:
      Value:
        Ref: MenuTable
      Export:
        Name: ${self:provider.stage}-MenuTable
    VenueTable:
      Value:
        Ref: VenueTable
      Export:
        Name: ${self:provider.stage}-VenueTable
    CardTable:
      Value:
        Ref: CardTable
      Export:
        Name: ${self:provider.stage}-CardTable
    ChargeTable:
      Value:
        Ref: ChargeTable
      Export:
        Name: ${self:provider.stage}-ChargeTable
    ClientTable:
      Value:
        Ref: ClientTable
      Export:
        Name: ${self:provider.stage}-ClientTable
    CustomerTable:
      Value:
        Ref: CustomerTable
      Export:
        Name: ${self:provider.stage}-CustomerTable
    TransactionTable:
      Value:
        Ref: TransactionTable
      Export:
        Name: ${self:provider.stage}-TransactionTable
    CustomerPool:
      Value:
        Ref: CustomerPool
      Export:
        Name: ${self:provider.stage}-CustomerPool
    CustomerPoolClient:
      Value:
        Ref: CustomerPoolClient
      Export:
        Name: ${self:provider.stage}-CustomerPoolClient
    CustomerPoolArn:
      Value:
        Fn::GetAtt: [CustomerPool, Arn]
      Export:
        Name: ${self:provider.stage}-CustomerPoolArn
    ClientPool:
      Value:
        Ref: ClientPool
      Export:
        Name: ${self:provider.stage}-ClientPool
    ClientPoolClient:
      Value:
        Ref: ClientPoolClient
      Export:
        Name: ${self:provider.stage}-ClientPoolClient
    ClientPoolArn:
      Value:
        Fn::GetAtt: [ClientPool, Arn]
      Export:
        Name: ${self:provider.stage}-ClientPoolArn
    ClosedTransactionBucket:
      Value:
        Fn::GetAtt: [ClosedTransactionBucket, Arn]
      Export:
        Name: ${self:provider.stage}-ClosedTransactionBucket
